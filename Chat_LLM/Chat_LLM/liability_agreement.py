# liability_agreement.py
"""
Defines the one-time liability and user agreement dialog shown on first launch.
"""

from PySide6.QtWidgets import (
    QVBoxLayout, QHBoxLayout, QLabel, QTextEdit, QCheckBox, QDialog
)
from PySide6.QtCore import Qt

from ui_widgets import CustomButton, BaseDialog

class LiabilityAgreementDialog(BaseDialog):
    """A modal dialog that forces the user to accept a EULA on first launch."""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("User Agreement")
        self.setMinimumSize(600, 550)
        
        # This dialog should not be closable by conventional means
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.Dialog | Qt.WindowStaysOnTopHint)

        self.scrolled_to_bottom = False
        self.setup_ui()
    
    def setup_ui(self):
        """Constructs the UI for the agreement dialog."""
        title_label = QLabel("User Agreement & Liability")
        title_label.setStyleSheet("font-size: 18px; font-weight: 600; background: transparent;")
        self.frame_layout.addWidget(title_label)

        agreement_text = """
        <p><b>End-User License Agreement (EULA)</b></p>
        <p>This End-User License Agreement ("EULA") is a legal agreement between you and the developers of Cortex.</p>
        <p>This EULA governs your acquisition and use of our Cortex software ("Software") directly from us or indirectly through an authorized reseller or distributor.</p>
        <p>Please read this EULA carefully before completing the installation process and using the Cortex software. It provides a license to use the Cortex software and contains warranty information and liability disclaimers.</p>
        <p>By clicking "accept" or installing and/or using the Cortex software, you are confirming your acceptance of the Software and agreeing to become bound by the terms of this EULA.</p>
        <p><b>1. License Grant</b></p>
        <p>The Software is licensed, not sold. We grant you a personal, non-transferable, non-exclusive license to use the Cortex software on your devices in accordance with the terms of this EULA.</p>
        <p><b>2. Intellectual Property and Ownership</b></p>
        <p>We shall at all times retain ownership of the Software as originally downloaded by you and all subsequent downloads of the Software by you. The Software (and the copyright, and other intellectual property rights of whatever nature in the Software, including any modifications made thereto) are and shall remain our property.</p>
        <p><b>3. User-Generated Content & AI Models</b></p>
        <p>Cortex is a tool that interfaces with local Large Language Models (LLMs). The content generated by these models is not the output of the Software's developers, but a result of the model's programming and your inputs.</p>
        <p>You, the user, are solely responsible for the inputs you provide and for the use of any content generated through the Software. You agree to use the Software and the generated content in compliance with all applicable laws and regulations.</p>
        <p><b>4. Disclaimer of Liability</b></p>
        <p>The developers of Cortex shall not be held liable for any content generated, actions taken, or consequences that arise from your use of the Software. You expressly understand and agree that you use this Software at your sole risk. The Software is provided on an "as is" and "as available" basis.</p>
        <p>The developers expressly disclaim all warranties of any kind, whether express or implied, including, but not to, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement.</p>
        <p><b>5. Limitation of Liability</b></p>
        <p>You expressly understand and agree that the developers of Cortex shall not be liable for any direct, indirect, incidental, special, consequential, or exemplary damages, including but not to, damages for loss of profits, goodwill, use, data, or other intangible losses (even if we have been advised of the possibility of such damages), resulting from the use or the inability to use the software.</p>
        """
        
        self.agreement_view = QTextEdit()
        self.agreement_view.setReadOnly(True)
        self.agreement_view.setHtml(agreement_text)
        self.agreement_view.setStyleSheet("""
            QTextEdit { 
                background-color: #ffffff; color: #1f1f1f; 
                border: 2px solid #e8e3dd; border-radius: 10px; 
                padding: 12px 16px; font-size: 13px; 
            }
            *[theme="dark"] QTextEdit { 
                background-color: #262626; color: #e0e0e0; border: 2px solid #505050; 
            }
        """)
        self.frame_layout.addWidget(self.agreement_view, 1)

        # Connect scrollbar signal to check for reaching the bottom
        scrollbar = self.agreement_view.verticalScrollBar()
        scrollbar.valueChanged.connect(self._on_scroll)

        bottom_layout = QHBoxLayout()
        bottom_layout.setContentsMargins(0, 10, 0, 0)
        
        self.agree_checkbox = QCheckBox("I have read and agree to these terms.")
        self.agree_checkbox.setToolTip("The Agree button is enabled when the document is scrolled to the bottom after reading")
        self.agree_checkbox.setStyleSheet("""
            QCheckBox { spacing: 8px; font-size: 14px; color: #4b5563; background: transparent; }
            *[theme="dark"] QCheckBox { color: #9ca3af; }
        """)
        bottom_layout.addWidget(self.agree_checkbox)
        
        bottom_layout.addStretch()

        self.continue_button = CustomButton("Agree & Continue", is_primary=True)
        self.continue_button.setFixedWidth(180)
        self.continue_button.setEnabled(False)
        self.continue_button.clicked.connect(self.accept)
        bottom_layout.addWidget(self.continue_button)

        self.agree_checkbox.toggled.connect(self._check_enable_continue)

        self.frame_layout.addLayout(bottom_layout)
    
    def showEvent(self, event):
        """
        Overrides showEvent to handle the edge case where no scrolling is needed.
        """
        super().showEvent(event)
        # This runs after the dialog is rendered, so the scrollbar size is accurate.
        scrollbar = self.agreement_view.verticalScrollBar()
        if scrollbar.maximum() == 0 and not self.scrolled_to_bottom:
            self.scrolled_to_bottom = True
            self.agree_checkbox.setToolTip("Check this box to agree to the terms.")
            self._check_enable_continue()
    
    def _on_scroll(self):
        """
        Slot connected to the scrollbar's valueChanged signal.
        Checks if the user has scrolled to the bottom.
        """
        scrollbar = self.agreement_view.verticalScrollBar()
        # Set the flag if the scrollbar is at its maximum position
        if scrollbar.value() >= scrollbar.maximum():
            if not self.scrolled_to_bottom: # Only update tooltip on first reach
                self.agree_checkbox.setToolTip("You may now agree to the terms.")
            self.scrolled_to_bottom = True
        
        self._check_enable_continue()

    def _check_enable_continue(self):
        """
        Checks if both conditions (scrolled to bottom and checkbox ticked)
        are met to enable the continue button. This is the single source of truth.
        """
        scrollbar = self.agreement_view.verticalScrollBar()
        
        # Condition is met if the user has scrolled to the bottom, OR if no scrolling is needed.
        can_agree = self.scrolled_to_bottom or (scrollbar.maximum() == 0)
        
        is_checked = self.agree_checkbox.isChecked()
        
        self.continue_button.setEnabled(can_agree and is_checked)
    
    def closeEvent(self, event):
        """Override close event to prevent closing the dialog without agreement."""
        # The only way to close is to click the "Agree & Continue" button.
        event.ignore()